<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/622d2cd81ba4/"/>
      <url>/posts/622d2cd81ba4/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在CloudFlare Workers搭建VLESS节点</title>
      <link href="/posts/74c96bffc5ad/"/>
      <url>/posts/74c96bffc5ad/</url>
      
        <content type="html"><![CDATA[<h1 id="在CloudFlare-Workers搭建VLESS节点"><a href="#在CloudFlare-Workers搭建VLESS节点" class="headerlink" title="在CloudFlare Workers搭建VLESS节点"></a>在CloudFlare Workers搭建VLESS节点</h1><h4 id="大家有没有想到CF-Workers也是可以搭建节点的？我之前一直以为是一种不可能的事，但是由于edgetunnel的作者zizifn和一些不留名的大佬编写并完善代码，让在CF-Workers搭建节点变成了一种可能。这篇文章就来和大家一起聊聊在CF-Workers搭建VLESS节点"><a href="#大家有没有想到CF-Workers也是可以搭建节点的？我之前一直以为是一种不可能的事，但是由于edgetunnel的作者zizifn和一些不留名的大佬编写并完善代码，让在CF-Workers搭建节点变成了一种可能。这篇文章就来和大家一起聊聊在CF-Workers搭建VLESS节点" class="headerlink" title="大家有没有想到CF Workers也是可以搭建节点的？我之前一直以为是一种不可能的事，但是由于edgetunnel的作者zizifn和一些不留名的大佬编写并完善代码，让在CF Workers搭建节点变成了一种可能。这篇文章就来和大家一起聊聊在CF Workers搭建VLESS节点"></a>大家有没有想到CF Workers也是可以搭建节点的？我之前一直以为是一种不可能的事，但是由于edgetunnel的作者zizifn和一些不留名的大佬编写并完善代码，让在CF Workers搭建节点变成了一种可能。这篇文章就来和大家一起聊聊在CF Workers搭建VLESS节点</h4><h4 id="本项目有封号风险，请谨慎部署！！！"><a href="#本项目有封号风险，请谨慎部署！！！" class="headerlink" title="本项目有封号风险，请谨慎部署！！！"></a><strong>本项目有封号风险，请谨慎部署！！！</strong></h4><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>CloudFlare 账号</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>请勿滥用本项目！</p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li><p>打开CF的控制台，转到“Workers &amp; Pages”页面，点击“Create Application”按钮</p><p><img src="/arch/1.1.png"></p></li><li><p>点击“Create Worker”按钮<br><img src="/arch/1.2.png"></p></li><li><p>设置workers的名称，点击“Deploy”按钮<br><img src="/arch/1.3.png"></p></li><li><p>点击“Configure Worker”按钮<br><img src="/arch/1.4.png"></p></li><li><p>点击“Quick Edit”按钮，修改代码<br><img src="/arch/1.5.png"></p></li><li><p>将提供的代码第7行的UUID，修改为自己的UUID（可选），并复制到Workers中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br></pre></td><td class="code"><pre><span class="line">// &lt;!--GAMFC--&gt;version base on commit 43fad05dcdae3b723c53c226f8181fc5bd47223e, time is 2023-06-22 15:20:02 UTC&lt;!--GAMFC-END--&gt;.</span><br><span class="line">// @ts-ignore</span><br><span class="line">import &#123; connect &#125; from &#x27;cloudflare:sockets&#x27;;</span><br><span class="line"></span><br><span class="line">// How to generate your own UUID:</span><br><span class="line">// [Windows] Press &quot;Win + R&quot;, input cmd and run:  Powershell -NoExit -Command &quot;[guid]::NewGuid()&quot;</span><br><span class="line">let userID = &#x27;d342d11e-d424-4583-b36e-524ab1f0afa4&#x27;;</span><br><span class="line"></span><br><span class="line">const proxyIPs = [&#x27;cdn-all.xn--b6gac.eu.org&#x27;, &#x27;cdn.xn--b6gac.eu.org&#x27;, &#x27;cdn-b100.xn--b6gac.eu.org&#x27;, &#x27;edgetunnel.anycast.eu.org&#x27;, &#x27;cdn.anycast.eu.org&#x27;];</span><br><span class="line">let proxyIP = proxyIPs[Math.floor(Math.random() * proxyIPs.length)];</span><br><span class="line"></span><br><span class="line">let dohURL = &#x27;https://sky.rethinkdns.com/1:-Pf_____9_8A_AMAIgE8kMABVDDmKOHTAKg=&#x27;; // https://cloudflare-dns.com/dns-query or https://dns.google/dns-query</span><br><span class="line"></span><br><span class="line">// v2board api environment variables</span><br><span class="line">let nodeId = &#x27;&#x27;; // 1</span><br><span class="line"></span><br><span class="line">let apiToken = &#x27;&#x27;; //abcdefghijklmnopqrstuvwxyz123456</span><br><span class="line"></span><br><span class="line">let apiHost = &#x27;&#x27;; // api.v2board.com</span><br><span class="line"></span><br><span class="line">if (!isValidUUID(userID)) &#123;</span><br><span class="line">throw new Error(&#x27;uuid is not valid&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;import(&quot;@cloudflare/workers-types&quot;).Request&#125; request</span><br><span class="line"> * @param &#123;&#123;UUID: string, PROXYIP: string, DNS_RESOLVER_URL: string, NODE_ID: int, API_HOST: string, API_TOKEN: string&#125;&#125; env</span><br><span class="line"> * @param &#123;import(&quot;@cloudflare/workers-types&quot;).ExecutionContext&#125; ctx</span><br><span class="line"> * @returns &#123;Promise&lt;Response&gt;&#125;</span><br><span class="line"> */</span><br><span class="line">async fetch(request, env, ctx) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">userID = env.UUID || userID;</span><br><span class="line">proxyIP = env.PROXYIP || proxyIP;</span><br><span class="line">dohURL = env.DNS_RESOLVER_URL || dohURL;</span><br><span class="line">nodeId = env.NODE_ID || nodeId;</span><br><span class="line">apiToken = env.API_TOKEN || apiToken;</span><br><span class="line">apiHost = env.API_HOST || apiHost;</span><br><span class="line">const upgradeHeader = request.headers.get(&#x27;Upgrade&#x27;);</span><br><span class="line">if (!upgradeHeader || upgradeHeader !== &#x27;websocket&#x27;) &#123;</span><br><span class="line">const url = new URL(request.url);</span><br><span class="line">switch (url.pathname) &#123;</span><br><span class="line">case &#x27;/&#x27;:</span><br><span class="line">return new Response(JSON.stringify(request.cf), &#123; status: 200 &#125;);</span><br><span class="line">case &#x27;/connect&#x27;: // for test connect to cf socket</span><br><span class="line">const [hostname, port] = [&#x27;cloudflare.com&#x27;, &#x27;80&#x27;];</span><br><span class="line">console.log(`Connecting to $&#123;hostname&#125;:$&#123;port&#125;...`);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">const socket = await connect(&#123;</span><br><span class="line">hostname: hostname,</span><br><span class="line">port: parseInt(port, 10),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const writer = socket.writable.getWriter();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">await writer.write(new TextEncoder().encode(&#x27;GET / HTTP/1.1\r\nHost: &#x27; + hostname + &#x27;\r\n\r\n&#x27;));</span><br><span class="line">&#125; catch (writeError) &#123;</span><br><span class="line">writer.releaseLock();</span><br><span class="line">await socket.close();</span><br><span class="line">return new Response(writeError.message, &#123; status: 500 &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">writer.releaseLock();</span><br><span class="line"></span><br><span class="line">const reader = socket.readable.getReader();</span><br><span class="line">let value;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">const result = await reader.read();</span><br><span class="line">value = result.value;</span><br><span class="line">&#125; catch (readError) &#123;</span><br><span class="line">await reader.releaseLock();</span><br><span class="line">await socket.close();</span><br><span class="line">return new Response(readError.message, &#123; status: 500 &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">await reader.releaseLock();</span><br><span class="line">await socket.close();</span><br><span class="line"></span><br><span class="line">return new Response(new TextDecoder().decode(value), &#123; status: 200 &#125;);</span><br><span class="line">&#125; catch (connectError) &#123;</span><br><span class="line">return new Response(connectError.message, &#123; status: 500 &#125;);</span><br><span class="line">&#125;</span><br><span class="line">case `/$&#123;userID&#125;`: &#123;</span><br><span class="line">const vlessConfig = getVLESSConfig(userID, request.headers.get(&#x27;Host&#x27;));</span><br><span class="line">return new Response(`$&#123;vlessConfig&#125;`, &#123;</span><br><span class="line">status: 200,</span><br><span class="line">headers: &#123;</span><br><span class="line">&quot;Content-Type&quot;: &quot;text/plain;charset=utf-8&quot;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">return new Response(&#x27;Not found&#x27;, &#123; status: 404 &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return await vlessOverWSHandler(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (err) &#123;</span><br><span class="line">/** @type &#123;Error&#125; */ let e = err;</span><br><span class="line">return new Response(e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;import(&quot;@cloudflare/workers-types&quot;).Request&#125; request</span><br><span class="line"> */</span><br><span class="line">async function vlessOverWSHandler(request) &#123;</span><br><span class="line"></span><br><span class="line">/** @type &#123;import(&quot;@cloudflare/workers-types&quot;).WebSocket[]&#125; */</span><br><span class="line">// @ts-ignore</span><br><span class="line">const webSocketPair = new WebSocketPair();</span><br><span class="line">const [client, webSocket] = Object.values(webSocketPair);</span><br><span class="line"></span><br><span class="line">webSocket.accept();</span><br><span class="line"></span><br><span class="line">let address = &#x27;&#x27;;</span><br><span class="line">let portWithRandomLog = &#x27;&#x27;;</span><br><span class="line">const log = (/** @type &#123;string&#125; */ info, /** @type &#123;string | undefined&#125; */ event) =&gt; &#123;</span><br><span class="line">console.log(`[$&#123;address&#125;:$&#123;portWithRandomLog&#125;] $&#123;info&#125;`, event || &#x27;&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line">const earlyDataHeader = request.headers.get(&#x27;sec-websocket-protocol&#x27;) || &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">const readableWebSocketStream = makeReadableWebSocketStream(webSocket, earlyDataHeader, log);</span><br><span class="line"></span><br><span class="line">/** @type &#123;&#123; value: import(&quot;@cloudflare/workers-types&quot;).Socket | null&#125;&#125;*/</span><br><span class="line">let remoteSocketWapper = &#123;</span><br><span class="line">value: null,</span><br><span class="line">&#125;;</span><br><span class="line">let udpStreamWrite = null;</span><br><span class="line">let isDns = false;</span><br><span class="line"></span><br><span class="line">// ws --&gt; remote</span><br><span class="line">readableWebSocketStream.pipeTo(new WritableStream(&#123;</span><br><span class="line">async write(chunk, controller) &#123;</span><br><span class="line">if (isDns &amp;&amp; udpStreamWrite) &#123;</span><br><span class="line">return udpStreamWrite(chunk);</span><br><span class="line">&#125;</span><br><span class="line">if (remoteSocketWapper.value) &#123;</span><br><span class="line">const writer = remoteSocketWapper.value.writable.getWriter()</span><br><span class="line">await writer.write(chunk);</span><br><span class="line">writer.releaseLock();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123;</span><br><span class="line">hasError,</span><br><span class="line">message,</span><br><span class="line">portRemote = 443,</span><br><span class="line">addressRemote = &#x27;&#x27;,</span><br><span class="line">rawDataIndex,</span><br><span class="line">vlessVersion = new Uint8Array([0, 0]),</span><br><span class="line">isUDP,</span><br><span class="line">&#125; = await processVlessHeader(chunk, userID);</span><br><span class="line">address = addressRemote;</span><br><span class="line">portWithRandomLog = `$&#123;portRemote&#125;--$&#123;Math.random()&#125; $&#123;isUDP ? &#x27;udp &#x27; : &#x27;tcp &#x27;</span><br><span class="line">&#125; `;</span><br><span class="line">if (hasError) &#123;</span><br><span class="line">// controller.error(message);</span><br><span class="line">throw new Error(message); // cf seems has bug, controller.error will not end stream</span><br><span class="line">// webSocket.close(1000, message);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">// if UDP but port not DNS port, close it</span><br><span class="line">if (isUDP) &#123;</span><br><span class="line">if (portRemote === 53) &#123;</span><br><span class="line">isDns = true;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// controller.error(&#x27;UDP proxy only enable for DNS which is port 53&#x27;);</span><br><span class="line">throw new Error(&#x27;UDP proxy only enable for DNS which is port 53&#x27;); // cf seems has bug, controller.error will not end stream</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// [&quot;version&quot;, &quot;附加信息长度 N&quot;]</span><br><span class="line">const vlessResponseHeader = new Uint8Array([vlessVersion[0], 0]);</span><br><span class="line">const rawClientData = chunk.slice(rawDataIndex);</span><br><span class="line"></span><br><span class="line">// TODO: support udp here when cf runtime has udp support</span><br><span class="line">if (isDns) &#123;</span><br><span class="line">const &#123; write &#125; = await handleUDPOutBound(webSocket, vlessResponseHeader, log);</span><br><span class="line">udpStreamWrite = write;</span><br><span class="line">udpStreamWrite(rawClientData);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">handleTCPOutBound(remoteSocketWapper, addressRemote, portRemote, rawClientData, webSocket, vlessResponseHeader, log);</span><br><span class="line">&#125;,</span><br><span class="line">close() &#123;</span><br><span class="line">log(`readableWebSocketStream is close`);</span><br><span class="line">&#125;,</span><br><span class="line">abort(reason) &#123;</span><br><span class="line">log(`readableWebSocketStream is abort`, JSON.stringify(reason));</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)).catch((err) =&gt; &#123;</span><br><span class="line">log(&#x27;readableWebSocketStream pipeTo error&#x27;, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return new Response(null, &#123;</span><br><span class="line">status: 101,</span><br><span class="line">// @ts-ignore</span><br><span class="line">webSocket: client,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let apiResponseCache = null;</span><br><span class="line">let cacheTimeout = null;</span><br><span class="line">async function fetchApiResponse() &#123;</span><br><span class="line">const requestOptions = &#123;</span><br><span class="line">method: &#x27;GET&#x27;,</span><br><span class="line">redirect: &#x27;follow&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">const response = await fetch(`https://$&#123;apiHost&#125;/api/v1/server/UniProxy/user?node_id=$&#123;nodeId&#125;&amp;node_type=v2ray&amp;token=$&#123;apiToken&#125;`, requestOptions);</span><br><span class="line"></span><br><span class="line">if (!response.ok) &#123;</span><br><span class="line">console.error(&#x27;Error: Network response was not ok&#x27;);</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">const apiResponse = await response.json();</span><br><span class="line">apiResponseCache = apiResponse;</span><br><span class="line"></span><br><span class="line">// Refresh the cache every 5 minutes (300000 milliseconds)</span><br><span class="line">if (cacheTimeout) &#123;</span><br><span class="line">clearTimeout(cacheTimeout);</span><br><span class="line">&#125;</span><br><span class="line">cacheTimeout = setTimeout(() =&gt; fetchApiResponse(), 300000);</span><br><span class="line"></span><br><span class="line">return apiResponse;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">console.error(&#x27;Error:&#x27;, error);</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function getApiResponse() &#123;</span><br><span class="line">if (!apiResponseCache) &#123;</span><br><span class="line">return await fetchApiResponse();</span><br><span class="line">&#125;</span><br><span class="line">return apiResponseCache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function checkUuidInApiResponse(targetUuid) &#123;</span><br><span class="line">// Check if any of the environment variables are empty</span><br><span class="line">if (!nodeId || !apiToken || !apiHost) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">const apiResponse = await getApiResponse();</span><br><span class="line">if (!apiResponse) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">const isUuidInResponse = apiResponse.users.some(user =&gt; user.uuid === targetUuid);</span><br><span class="line">return isUuidInResponse;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">console.error(&#x27;Error:&#x27;, error);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Usage example:</span><br><span class="line">//   const targetUuid = &quot;65590e04-a94c-4c59-a1f2-571bce925aad&quot;;</span><br><span class="line">//   checkUuidInApiResponse(targetUuid).then(result =&gt; console.log(result));</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Handles outbound TCP connections.</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;any&#125; remoteSocket </span><br><span class="line"> * @param &#123;string&#125; addressRemote The remote address to connect to.</span><br><span class="line"> * @param &#123;number&#125; portRemote The remote port to connect to.</span><br><span class="line"> * @param &#123;Uint8Array&#125; rawClientData The raw client data to write.</span><br><span class="line"> * @param &#123;import(&quot;@cloudflare/workers-types&quot;).WebSocket&#125; webSocket The WebSocket to pass the remote socket to.</span><br><span class="line"> * @param &#123;Uint8Array&#125; vlessResponseHeader The VLESS response header.</span><br><span class="line"> * @param &#123;function&#125; log The logging function.</span><br><span class="line"> * @returns &#123;Promise&lt;void&gt;&#125; The remote socket.</span><br><span class="line"> */</span><br><span class="line">async function handleTCPOutBound(remoteSocket, addressRemote, portRemote, rawClientData, webSocket, vlessResponseHeader, log,) &#123;</span><br><span class="line">async function connectAndWrite(address, port) &#123;</span><br><span class="line">/** @type &#123;import(&quot;@cloudflare/workers-types&quot;).Socket&#125; */</span><br><span class="line">const tcpSocket = connect(&#123;</span><br><span class="line">hostname: address,</span><br><span class="line">port: port,</span><br><span class="line">&#125;);</span><br><span class="line">remoteSocket.value = tcpSocket;</span><br><span class="line">log(`connected to $&#123;address&#125;:$&#123;port&#125;`);</span><br><span class="line">const writer = tcpSocket.writable.getWriter();</span><br><span class="line">await writer.write(rawClientData); // first write, nomal is tls client hello</span><br><span class="line">writer.releaseLock();</span><br><span class="line">return tcpSocket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// if the cf connect tcp socket have no incoming data, we retry to redirect ip</span><br><span class="line">async function retry() &#123;</span><br><span class="line">const tcpSocket = await connectAndWrite(proxyIP || addressRemote, portRemote)</span><br><span class="line">// no matter retry success or not, close websocket</span><br><span class="line">tcpSocket.closed.catch(error =&gt; &#123;</span><br><span class="line">console.log(&#x27;retry tcpSocket closed error&#x27;, error);</span><br><span class="line">&#125;).finally(() =&gt; &#123;</span><br><span class="line">safeCloseWebSocket(webSocket);</span><br><span class="line">&#125;)</span><br><span class="line">remoteSocketToWS(tcpSocket, webSocket, vlessResponseHeader, null, log);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const tcpSocket = await connectAndWrite(addressRemote, portRemote);</span><br><span class="line"></span><br><span class="line">// when remoteSocket is ready, pass to websocket</span><br><span class="line">// remote--&gt; ws</span><br><span class="line">remoteSocketToWS(tcpSocket, webSocket, vlessResponseHeader, retry, log);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;import(&quot;@cloudflare/workers-types&quot;).WebSocket&#125; webSocketServer</span><br><span class="line"> * @param &#123;string&#125; earlyDataHeader for ws 0rtt</span><br><span class="line"> * @param &#123;(info: string)=&gt; void&#125; log for ws 0rtt</span><br><span class="line"> */</span><br><span class="line">function makeReadableWebSocketStream(webSocketServer, earlyDataHeader, log) &#123;</span><br><span class="line">let readableStreamCancel = false;</span><br><span class="line">const stream = new ReadableStream(&#123;</span><br><span class="line">start(controller) &#123;</span><br><span class="line">webSocketServer.addEventListener(&#x27;message&#x27;, (event) =&gt; &#123;</span><br><span class="line">if (readableStreamCancel) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">const message = event.data;</span><br><span class="line">controller.enqueue(message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// The event means that the client closed the client -&gt; server stream.</span><br><span class="line">// However, the server -&gt; client stream is still open until you call close() on the server side.</span><br><span class="line">// The WebSocket protocol says that a separate close message must be sent in each direction to fully close the socket.</span><br><span class="line">webSocketServer.addEventListener(&#x27;close&#x27;, () =&gt; &#123;</span><br><span class="line">// client send close, need close server</span><br><span class="line">// if stream is cancel, skip controller.close</span><br><span class="line">safeCloseWebSocket(webSocketServer);</span><br><span class="line">if (readableStreamCancel) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">controller.close();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">webSocketServer.addEventListener(&#x27;error&#x27;, (err) =&gt; &#123;</span><br><span class="line">log(&#x27;webSocketServer has error&#x27;);</span><br><span class="line">controller.error(err);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">// for ws 0rtt</span><br><span class="line">const &#123; earlyData, error &#125; = base64ToArrayBuffer(earlyDataHeader);</span><br><span class="line">if (error) &#123;</span><br><span class="line">controller.error(error);</span><br><span class="line">&#125; else if (earlyData) &#123;</span><br><span class="line">controller.enqueue(earlyData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">pull(controller) &#123;</span><br><span class="line">// if ws can stop read if stream is full, we can implement backpressure</span><br><span class="line">// https://streams.spec.whatwg.org/#example-rs-push-backpressure</span><br><span class="line">&#125;,</span><br><span class="line">cancel(reason) &#123;</span><br><span class="line">// 1. pipe WritableStream has error, this cancel will called, so ws handle server close into here</span><br><span class="line">// 2. if readableStream is cancel, all controller.close/enqueue need skip,</span><br><span class="line">// 3. but from testing controller.error still work even if readableStream is cancel</span><br><span class="line">if (readableStreamCancel) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">log(`ReadableStream was canceled, due to $&#123;reason&#125;`)</span><br><span class="line">readableStreamCancel = true;</span><br><span class="line">safeCloseWebSocket(webSocketServer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return stream;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// https://xtls.github.io/development/protocols/vless.html</span><br><span class="line">// https://github.com/zizifn/excalidraw-backup/blob/main/v2ray-protocol.excalidraw</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123; ArrayBuffer&#125; vlessBuffer </span><br><span class="line"> * @param &#123;string&#125; userID </span><br><span class="line"> * @returns </span><br><span class="line"> */</span><br><span class="line">async function processVlessHeader(</span><br><span class="line">vlessBuffer,</span><br><span class="line">userID</span><br><span class="line">) &#123;</span><br><span class="line">if (vlessBuffer.byteLength &lt; 24) &#123;</span><br><span class="line">return &#123;</span><br><span class="line">hasError: true,</span><br><span class="line">message: &#x27;invalid data&#x27;,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">const version = new Uint8Array(vlessBuffer.slice(0, 1));</span><br><span class="line">let isValidUser = false;</span><br><span class="line">let isUDP = false;</span><br><span class="line">const slicedBuffer = new Uint8Array(vlessBuffer.slice(1, 17));</span><br><span class="line">const slicedBufferString = stringify(slicedBuffer);</span><br><span class="line"></span><br><span class="line">const uuids = userID.includes(&#x27;,&#x27;) ? userID.split(&quot;,&quot;) : [userID];</span><br><span class="line"></span><br><span class="line">const checkUuidInApi = await checkUuidInApiResponse(slicedBufferString);</span><br><span class="line">isValidUser = uuids.some(userUuid =&gt; checkUuidInApi || slicedBufferString === userUuid.trim());</span><br><span class="line"></span><br><span class="line">console.log(`checkUuidInApi: $&#123;await checkUuidInApiResponse(slicedBufferString)&#125;, userID: $&#123;slicedBufferString&#125;`);</span><br><span class="line"></span><br><span class="line">if (!isValidUser) &#123;</span><br><span class="line">return &#123;</span><br><span class="line">hasError: true,</span><br><span class="line">message: &#x27;invalid user&#x27;,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const optLength = new Uint8Array(vlessBuffer.slice(17, 18))[0];</span><br><span class="line">//skip opt for now</span><br><span class="line"></span><br><span class="line">const command = new Uint8Array(</span><br><span class="line">vlessBuffer.slice(18 + optLength, 18 + optLength + 1)</span><br><span class="line">)[0];</span><br><span class="line"></span><br><span class="line">// 0x01 TCP</span><br><span class="line">// 0x02 UDP</span><br><span class="line">// 0x03 MUX</span><br><span class="line">if (command === 1) &#123;</span><br><span class="line">&#125; else if (command === 2) &#123;</span><br><span class="line">isUDP = true;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return &#123;</span><br><span class="line">hasError: true,</span><br><span class="line">message: `command $&#123;command&#125; is not support, command 01-tcp,02-udp,03-mux`,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">const portIndex = 18 + optLength + 1;</span><br><span class="line">const portBuffer = vlessBuffer.slice(portIndex, portIndex + 2);</span><br><span class="line">// port is big-Endian in raw data etc 80 == 0x005d</span><br><span class="line">const portRemote = new DataView(portBuffer).getUint16(0);</span><br><span class="line"></span><br><span class="line">let addressIndex = portIndex + 2;</span><br><span class="line">const addressBuffer = new Uint8Array(</span><br><span class="line">vlessBuffer.slice(addressIndex, addressIndex + 1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 1--&gt; ipv4  addressLength =4</span><br><span class="line">// 2--&gt; domain name addressLength=addressBuffer[1]</span><br><span class="line">// 3--&gt; ipv6  addressLength =16</span><br><span class="line">const addressType = addressBuffer[0];</span><br><span class="line">let addressLength = 0;</span><br><span class="line">let addressValueIndex = addressIndex + 1;</span><br><span class="line">let addressValue = &#x27;&#x27;;</span><br><span class="line">switch (addressType) &#123;</span><br><span class="line">case 1:</span><br><span class="line">addressLength = 4;</span><br><span class="line">addressValue = new Uint8Array(</span><br><span class="line">vlessBuffer.slice(addressValueIndex, addressValueIndex + addressLength)</span><br><span class="line">).join(&#x27;.&#x27;);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">addressLength = new Uint8Array(</span><br><span class="line">vlessBuffer.slice(addressValueIndex, addressValueIndex + 1)</span><br><span class="line">)[0];</span><br><span class="line">addressValueIndex += 1;</span><br><span class="line">addressValue = new TextDecoder().decode(</span><br><span class="line">vlessBuffer.slice(addressValueIndex, addressValueIndex + addressLength)</span><br><span class="line">);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">addressLength = 16;</span><br><span class="line">const dataView = new DataView(</span><br><span class="line">vlessBuffer.slice(addressValueIndex, addressValueIndex + addressLength)</span><br><span class="line">);</span><br><span class="line">// 2001:0db8:85a3:0000:0000:8a2e:0370:7334</span><br><span class="line">const ipv6 = [];</span><br><span class="line">for (let i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">ipv6.push(dataView.getUint16(i * 2).toString(16));</span><br><span class="line">&#125;</span><br><span class="line">addressValue = ipv6.join(&#x27;:&#x27;);</span><br><span class="line">// seems no need add [] for ipv6</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">return &#123;</span><br><span class="line">hasError: true,</span><br><span class="line">message: `invild  addressType is $&#123;addressType&#125;`,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">if (!addressValue) &#123;</span><br><span class="line">return &#123;</span><br><span class="line">hasError: true,</span><br><span class="line">message: `addressValue is empty, addressType is $&#123;addressType&#125;`,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &#123;</span><br><span class="line">hasError: false,</span><br><span class="line">addressRemote: addressValue,</span><br><span class="line">addressType,</span><br><span class="line">portRemote,</span><br><span class="line">rawDataIndex: addressValueIndex + addressLength,</span><br><span class="line">vlessVersion: version,</span><br><span class="line">isUDP,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;import(&quot;@cloudflare/workers-types&quot;).Socket&#125; remoteSocket </span><br><span class="line"> * @param &#123;import(&quot;@cloudflare/workers-types&quot;).WebSocket&#125; webSocket </span><br><span class="line"> * @param &#123;ArrayBuffer&#125; vlessResponseHeader </span><br><span class="line"> * @param &#123;(() =&gt; Promise&lt;void&gt;) | null&#125; retry</span><br><span class="line"> * @param &#123;*&#125; log </span><br><span class="line"> */</span><br><span class="line">async function remoteSocketToWS(remoteSocket, webSocket, vlessResponseHeader, retry, log) &#123;</span><br><span class="line">// remote--&gt; ws</span><br><span class="line">let remoteChunkCount = 0;</span><br><span class="line">let chunks = [];</span><br><span class="line">/** @type &#123;ArrayBuffer | null&#125; */</span><br><span class="line">let vlessHeader = vlessResponseHeader;</span><br><span class="line">let hasIncomingData = false; // check if remoteSocket has incoming data</span><br><span class="line">await remoteSocket.readable</span><br><span class="line">.pipeTo(</span><br><span class="line">new WritableStream(&#123;</span><br><span class="line">start() &#123;</span><br><span class="line">&#125;,</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;Uint8Array&#125; chunk </span><br><span class="line"> * @param &#123;*&#125; controller </span><br><span class="line"> */</span><br><span class="line">async write(chunk, controller) &#123;</span><br><span class="line">hasIncomingData = true;</span><br><span class="line">// remoteChunkCount++;</span><br><span class="line">if (webSocket.readyState !== WS_READY_STATE_OPEN) &#123;</span><br><span class="line">controller.error(</span><br><span class="line">&#x27;webSocket.readyState is not open, maybe close&#x27;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">if (vlessHeader) &#123;</span><br><span class="line">webSocket.send(await new Blob([vlessHeader, chunk]).arrayBuffer());</span><br><span class="line">vlessHeader = null;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// seems no need rate limit this, CF seems fix this??..</span><br><span class="line">// if (remoteChunkCount &gt; 20000) &#123;</span><br><span class="line">// // cf one package is 4096 byte(4kb),  4096 * 20000 = 80M</span><br><span class="line">// await delay(1);</span><br><span class="line">// &#125;</span><br><span class="line">webSocket.send(chunk);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">close() &#123;</span><br><span class="line">log(`remoteConnection!.readable is close with hasIncomingData is $&#123;hasIncomingData&#125;`);</span><br><span class="line">// safeCloseWebSocket(webSocket); // no need server close websocket frist for some case will casue HTTP ERR_CONTENT_LENGTH_MISMATCH issue, client will send close event anyway.</span><br><span class="line">&#125;,</span><br><span class="line">abort(reason) &#123;</span><br><span class="line">console.error(`remoteConnection!.readable abort`, reason);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br><span class="line">.catch((error) =&gt; &#123;</span><br><span class="line">console.error(</span><br><span class="line">`remoteSocketToWS has exception `,</span><br><span class="line">error.stack || error</span><br><span class="line">);</span><br><span class="line">safeCloseWebSocket(webSocket);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// seems is cf connect socket have error,</span><br><span class="line">// 1. Socket.closed will have error</span><br><span class="line">// 2. Socket.readable will be close without any data coming</span><br><span class="line">if (hasIncomingData === false &amp;&amp; retry) &#123;</span><br><span class="line">log(`retry`)</span><br><span class="line">retry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;string&#125; base64Str </span><br><span class="line"> * @returns </span><br><span class="line"> */</span><br><span class="line">function base64ToArrayBuffer(base64Str) &#123;</span><br><span class="line">if (!base64Str) &#123;</span><br><span class="line">return &#123; error: null &#125;;</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">// go use modified Base64 for URL rfc4648 which js atob not support</span><br><span class="line">base64Str = base64Str.replace(/-/g, &#x27;+&#x27;).replace(/_/g, &#x27;/&#x27;);</span><br><span class="line">const decode = atob(base64Str);</span><br><span class="line">const arryBuffer = Uint8Array.from(decode, (c) =&gt; c.charCodeAt(0));</span><br><span class="line">return &#123; earlyData: arryBuffer.buffer, error: null &#125;;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">return &#123; error &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * This is not real UUID validation</span><br><span class="line"> * @param &#123;string&#125; uuid </span><br><span class="line"> */</span><br><span class="line">function isValidUUID(uuid) &#123;</span><br><span class="line">const uuidRegex = /^[0-9a-f]&#123;8&#125;-[0-9a-f]&#123;4&#125;-[4][0-9a-f]&#123;3&#125;-[89ab][0-9a-f]&#123;3&#125;-[0-9a-f]&#123;12&#125;$/i;</span><br><span class="line">return uuidRegex.test(uuid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const WS_READY_STATE_OPEN = 1;</span><br><span class="line">const WS_READY_STATE_CLOSING = 2;</span><br><span class="line">/**</span><br><span class="line"> * Normally, WebSocket will not has exceptions when close.</span><br><span class="line"> * @param &#123;import(&quot;@cloudflare/workers-types&quot;).WebSocket&#125; socket</span><br><span class="line"> */</span><br><span class="line">function safeCloseWebSocket(socket) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (socket.readyState === WS_READY_STATE_OPEN || socket.readyState === WS_READY_STATE_CLOSING) &#123;</span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">console.error(&#x27;safeCloseWebSocket error&#x27;, error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const byteToHex = [];</span><br><span class="line">for (let i = 0; i &lt; 256; ++i) &#123;</span><br><span class="line">byteToHex.push((i + 256).toString(16).slice(1));</span><br><span class="line">&#125;</span><br><span class="line">function unsafeStringify(arr, offset = 0) &#123;</span><br><span class="line">return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + &quot;-&quot; + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + &quot;-&quot; + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + &quot;-&quot; + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + &quot;-&quot; + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line">function stringify(arr, offset = 0) &#123;</span><br><span class="line">const uuid = unsafeStringify(arr, offset);</span><br><span class="line">if (!isValidUUID(uuid)) &#123;</span><br><span class="line">throw TypeError(&quot;Stringified UUID is invalid&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return uuid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;import(&quot;@cloudflare/workers-types&quot;).WebSocket&#125; webSocket </span><br><span class="line"> * @param &#123;ArrayBuffer&#125; vlessResponseHeader </span><br><span class="line"> * @param &#123;(string)=&gt; void&#125; log </span><br><span class="line"> */</span><br><span class="line">async function handleUDPOutBound(webSocket, vlessResponseHeader, log) &#123;</span><br><span class="line"></span><br><span class="line">let isVlessHeaderSent = false;</span><br><span class="line">const transformStream = new TransformStream(&#123;</span><br><span class="line">start(controller) &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">transform(chunk, controller) &#123;</span><br><span class="line">// udp message 2 byte is the the length of udp data</span><br><span class="line">// TODO: this should have bug, beacsue maybe udp chunk can be in two websocket message</span><br><span class="line">for (let index = 0; index &lt; chunk.byteLength;) &#123;</span><br><span class="line">const lengthBuffer = chunk.slice(index, index + 2);</span><br><span class="line">const udpPakcetLength = new DataView(lengthBuffer).getUint16(0);</span><br><span class="line">const udpData = new Uint8Array(</span><br><span class="line">chunk.slice(index + 2, index + 2 + udpPakcetLength)</span><br><span class="line">);</span><br><span class="line">index = index + 2 + udpPakcetLength;</span><br><span class="line">controller.enqueue(udpData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">flush(controller) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// only handle dns udp for now</span><br><span class="line">transformStream.readable.pipeTo(new WritableStream(&#123;</span><br><span class="line">async write(chunk) &#123;</span><br><span class="line">const resp = await fetch(dohURL, // dns server url</span><br><span class="line">&#123;</span><br><span class="line">method: &#x27;POST&#x27;,</span><br><span class="line">headers: &#123;</span><br><span class="line">&#x27;content-type&#x27;: &#x27;application/dns-message&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">body: chunk,</span><br><span class="line">&#125;)</span><br><span class="line">const dnsQueryResult = await resp.arrayBuffer();</span><br><span class="line">const udpSize = dnsQueryResult.byteLength;</span><br><span class="line">// console.log([...new Uint8Array(dnsQueryResult)].map((x) =&gt; x.toString(16)));</span><br><span class="line">const udpSizeBuffer = new Uint8Array([(udpSize &gt;&gt; 8) &amp; 0xff, udpSize &amp; 0xff]);</span><br><span class="line">if (webSocket.readyState === WS_READY_STATE_OPEN) &#123;</span><br><span class="line">log(`doh success and dns message length is $&#123;udpSize&#125;`);</span><br><span class="line">if (isVlessHeaderSent) &#123;</span><br><span class="line">webSocket.send(await new Blob([udpSizeBuffer, dnsQueryResult]).arrayBuffer());</span><br><span class="line">&#125; else &#123;</span><br><span class="line">webSocket.send(await new Blob([vlessResponseHeader, udpSizeBuffer, dnsQueryResult]).arrayBuffer());</span><br><span class="line">isVlessHeaderSent = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)).catch((error) =&gt; &#123;</span><br><span class="line">log(&#x27;dns udp has error&#x27; + error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const writer = transformStream.writable.getWriter();</span><br><span class="line"></span><br><span class="line">return &#123;</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;Uint8Array&#125; chunk </span><br><span class="line"> */</span><br><span class="line">write(chunk) &#123;</span><br><span class="line">writer.write(chunk);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;string&#125; userID </span><br><span class="line"> * @param &#123;string | null&#125; hostName</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function getVLESSConfig(userID, hostName) &#123;</span><br><span class="line">const vlessMain = `vless://$&#123;userID&#125;@$&#123;hostName&#125;:443?encryption=none&amp;security=tls&amp;sni=$&#123;hostName&#125;&amp;fp=randomized&amp;type=ws&amp;host=$&#123;hostName&#125;&amp;path=%2F%3Fed%3D2048#$&#123;hostName&#125;`</span><br><span class="line">const vlessSec = `vless://$&#123;userID&#125;@$&#123;proxyIP&#125;:443?encryption=none&amp;security=tls&amp;sni=$&#123;hostName&#125;&amp;fp=randomized&amp;type=ws&amp;host=$&#123;hostName&#125;&amp;path=%2F%3Fed%3D2048#$&#123;hostName&#125;`</span><br><span class="line">return `</span><br><span class="line">################################################################</span><br><span class="line">v2ray default ip</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">$&#123;vlessMain&#125;</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">################################################################</span><br><span class="line">v2ray with best ip</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">$&#123;vlessSec&#125;</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">################################################################</span><br><span class="line">clash-meta</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">- type: vless</span><br><span class="line">  name: $&#123;hostName&#125;</span><br><span class="line">  server: $&#123;hostName&#125;</span><br><span class="line">  port: 443</span><br><span class="line">  uuid: $&#123;userID&#125;</span><br><span class="line">  network: ws</span><br><span class="line">  tls: true</span><br><span class="line">  udp: false</span><br><span class="line">  sni: $&#123;hostName&#125;</span><br><span class="line">  client-fingerprint: chrome</span><br><span class="line">  ws-opts:</span><br><span class="line">    path: &quot;/?ed=2048&quot;</span><br><span class="line">    headers:</span><br><span class="line">      host: $&#123;hostName&#125;</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">################################################################</span><br><span class="line">`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击“Save and deploy”按钮，保存代码。然后复制workers地址备用<br><img src="/arch/1.6.png"></p></li><li><p>节点配置如下</p><p><img src="/arch/1.7.png"></p></li></ol><ul><li>非TLS（可适用于无域名情况）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">协议：Vless</span><br><span class="line">地址：CF优选IP / 域名</span><br><span class="line">端口：80 或 CF 支持的 HTTPS 端口</span><br><span class="line">UUID/密码：设置的UUID（如未设置则为 `d342d11e-d424-4583-b36e-524ab1f0afa4`）</span><br><span class="line">传输协议：ws</span><br><span class="line">伪装域名：设置的 Workers 自定义域名</span><br><span class="line">路径：/</span><br></pre></td></tr></table></figure><ul><li>TLS（仅限自定义域名）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">协议：Vless</span><br><span class="line">地址：CF优选IP / 域名</span><br><span class="line">端口：443 或 CF 支持的 HTTPS 端口</span><br><span class="line">UUID/密码：设置的UUID（如未设置则为 `d342d11e-d424-4583-b36e-524ab1f0afa4`）</span><br><span class="line">传输协议：ws</span><br><span class="line">伪装域名：设置的 Workers 自定义域名</span><br><span class="line">路径：/</span><br><span class="line">传输安全：TLS</span><br><span class="line">跳过证书验证：true 或 false 都可以</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建云崽机器人</title>
      <link href="/posts/64c32d384567/"/>
      <url>/posts/64c32d384567/</url>
      
        <content type="html"><![CDATA[<h1 id="debian-ubuntu-搭建云崽机器人"><a href="#debian-ubuntu-搭建云崽机器人" class="headerlink" title="debian&amp;ubuntu 搭建云崽机器人"></a>debian&amp;ubuntu 搭建云崽机器人</h1><h3 id="关于怎么链接服务器，暂时不讲。"><a href="#关于怎么链接服务器，暂时不讲。" class="headerlink" title="关于怎么链接服务器，暂时不讲。"></a>关于怎么链接服务器，暂时不讲。</h3><h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h3><h4 id="安装-curl"><a href="#安装-curl" class="headerlink" title="安装 curl"></a>安装 curl</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -y install curl</span><br></pre></td></tr></table></figure><h4 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -y install git</span><br></pre></td></tr></table></figure><h4 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -y install redis</span><br></pre></td></tr></table></figure><h4 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h4><p><strong>Ubuntu 系统下命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - &amp;&amp;\</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p><strong>Debian 系统下 Debian 系统下, Root 账户命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - &amp;&amp;\</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure><h3 id="安装-chromium-浏览器"><a href="#安装-chromium-浏览器" class="headerlink" title="安装 chromium 浏览器"></a>安装 chromium 浏览器</h3><p><strong>Debian 系统下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -y install chromium</span><br></pre></td></tr></table></figure><p><strong>ubuntu 版本浏览器安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y chromium-browser</span><br></pre></td></tr></table></figure><h3 id="安装字体（二选一）"><a href="#安装字体（二选一）" class="headerlink" title="安装字体（二选一）"></a>安装字体（二选一）</h3><p><strong>文泉驿黑体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install ttf-wqy-zenhei</span><br><span class="line">apt install fonts-wqy-microhei</span><br></pre></td></tr></table></figure><h3 id="安装-screen-命令"><a href="#安装-screen-命令" class="headerlink" title="安装 screen 命令"></a>安装 screen 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y screen</span><br></pre></td></tr></table></figure><h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 -b main https://gitee.com/Le-niao/Yunzai-Bot.git</span><br></pre></td></tr></table></figure><h3 id="然后进入-Yunzai-根目录"><a href="#然后进入-Yunzai-根目录" class="headerlink" title="然后进入 Yunzai 根目录"></a>然后进入 Yunzai 根目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Yunzai-Bot</span><br></pre></td></tr></table></figure><h3 id="安装-pnpm，已安装的可以跳过"><a href="#安装-pnpm，已安装的可以跳过" class="headerlink" title="安装 pnpm，已安装的可以跳过"></a>安装 pnpm，已安装的可以跳过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pnpm -g</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -P</span><br></pre></td></tr></table></figure><h3 id="最后运行（首次运行按提示输入登录）"><a href="#最后运行（首次运行按提示输入登录）" class="headerlink" title="最后运行（首次运行按提示输入登录）"></a>最后运行（首次运行按提示输入登录）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app</span><br></pre></td></tr></table></figure><h3 id="至此，云崽的搭建就完成了。"><a href="#至此，云崽的搭建就完成了。" class="headerlink" title="至此，云崽的搭建就完成了。"></a>至此，云崽的搭建就完成了。</h3><h4 id="如果-ubuntu-系统下遇到浏览器启动报错可以尝试下面的解决方法"><a href="#如果-ubuntu-系统下遇到浏览器启动报错可以尝试下面的解决方法" class="headerlink" title="如果 ubuntu 系统下遇到浏览器启动报错可以尝试下面的解决方法"></a>如果 ubuntu 系统下遇到浏览器启动报错可以尝试下面的解决方法</h4><h4 id="确保安装了所有必要的依赖项。您可以-ldd-chrome-grep-not-在-Linux-机器上运行以检查缺少哪些依赖项。"><a href="#确保安装了所有必要的依赖项。您可以-ldd-chrome-grep-not-在-Linux-机器上运行以检查缺少哪些依赖项。" class="headerlink" title="确保安装了所有必要的依赖项。您可以 ldd chrome | grep not 在 Linux 机器上运行以检查缺少哪些依赖项。"></a>确保安装了所有必要的依赖项。您可以 ldd chrome | grep not 在 Linux 机器上运行以检查缺少哪些依赖项。</h4><h4 id="注意-linux-982053-这个版本可能和你自己的版本不太一样自行替换"><a href="#注意-linux-982053-这个版本可能和你自己的版本不太一样自行替换" class="headerlink" title="注意 linux-982053 这个版本可能和你自己的版本不太一样自行替换"></a>注意 linux-982053 这个版本可能和你自己的版本不太一样自行替换</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /Yunzai-Bot/node_modules/puppeteer/.local-chromium/linux-982053/chrome-linux/</span><br></pre></td></tr></table></figure><p><strong>输入 <code>ldd chrome | grep not</code> 查看缺少的依赖</strong></p><h4 id="你可以根据列出来的添加，也可以和我一样全部安装（懒得一个一个找）"><a href="#你可以根据列出来的添加，也可以和我一样全部安装（懒得一个一个找）" class="headerlink" title="你可以根据列出来的添加，也可以和我一样全部安装（懒得一个一个找）"></a>你可以根据列出来的添加，也可以和我一样全部安装（懒得一个一个找）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云崽 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
